#include <bits/stdc++.h>
 
using namespace std;
#define ll long long
#define ld long double
#define endl "\n"
typedef vector<ll> vll;
#define pb              push_back 
#define fori(n)         for (ll i=0; i<n; i++) 
#define forj(n)         for (ll j=0; j<n; j++) 
#define fork(n)         for (ll k=0; k<n; k++) 
#define forn(n)         for (ll i=1; i<=n; i++) 
#define forn2(n)        for (ll j=1; j<=n; j++) 
#define forn3(n)        for (ll k=1; k<=n; k++) 
#define Sort(a)         sort(a.begin(),a.end())

const int N=1e5+10;
    vector<ll> g[N];
vll a(N);
ll k[N];
void bfs(){
        queue<ll> q;
        bool visited[N];
        ll distance2[N];
        ll x=1;
        //ll k=1;
        visited[x] = true;
        distance2[x] = 0;
        q.push(x);
        //a[1]=1;
        ll maxdis=0;
        map<ll,ll> mp;
        while (!q.empty()) {
            ll s = q.front(); q.pop();
    // process node s
            for (auto u : g[s]) {
                if (visited[u]) continue;
                visited[u] = true;
                distance2[u] = distance2[s]+1;
                maxdis=max(maxdis,distance2[u]);
                mp[distance2[u]]++;
                //a[u]=k;                
                q.push(u);
            }
            k[distance2[s]+1]++;
    
        }
        ll sum=0,ans=0;
        for(ll i=maxdis;i>=1;i--){
            ans=max(sum+mp[i],ans);
            sum+=k[i];
        }
        cout<<ans<<endl;
    }


void solve(){

    ll n;
    cin>>n;
    vll p(n+1);
    for(ll i=2;i<=n;i++){
        cin>>p[i];
        g[i].pb(p[i]);
        g[p[i]].pb(i);
    }

    bfs();
    fori(n+3){
        g[i].clear();
        k[i]=0;
    }
    




}

int main(){


    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    //Redeem yourself King.
    solve();
    
   
    return 0;
}
